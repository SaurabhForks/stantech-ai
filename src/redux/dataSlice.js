import { createSlice } from "@reduxjs/toolkit";
import { fetchData } from "./fetchData";

/**
 * Creates a slice for managing the user data state in the Redux store.
 *
 * This slice uses `createSlice` from Redux Toolkit to define the reducer logic,
 * initial state, and action creators related to user data. It also uses
 * `extraReducers` to handle the lifecycle of the asynchronous `fetchData` thunk.
 */
const dataSlice = createSlice({
  /**
   * The name of the slice. This will be used as a prefix for the generated action types.
   */
  name: "data",
  /**
   * The initial state for the slice.
   *
   * @property {object[]} data - An array to store the fetched user data.
   * @property {string} loading - The loading state of the data fetching process.
   *  Can be 'idle', 'pending', 'succeeded', or 'failed'.
   * @property {string|null} error - Stores any error message that occurred during the fetching.
   */
  initialState: {
    data: [],
    loading: "idle", // 'idle' | 'pending' | 'succeeded' | 'failed'
    error: null,
  },
  /**
   * Reducers specific to this slice.
   * In this case there are no reducers that are not related to an extra reducer.
   */
  reducers: {},
  /**
   * Defines extra reducers to handle the lifecycle of the `fetchData` thunk.
   *
   * @param {object} builder - The builder object used to define extra reducers.
   */
  extraReducers: (builder) => {
    builder
      /**
       * Handles the pending state of the `fetchData` thunk.
       *
       * Sets the loading state to 'pending' to indicate that data fetching is in progress.
       */
      .addCase(fetchData.pending, (state) => {
        state.loading = "pending";
      })
      /**
       * Handles the fulfilled state of the `fetchData` thunk.
       *
       * Sets the loading state to 'succeeded' and updates the `data` array with the
       * data from the action payload.
       *
       * @param {object} state - The current state of the slice.
       * @param {object} action - The action object containing the fetched data in the payload.
       * @param {object[]} action.payload - The array of fetched user objects.
       */
      .addCase(fetchData.fulfilled, (state, action) => {
        state.loading = "succeeded";
        state.data = action.payload;
      })
      /**
       * Handles the rejected state of the `fetchData` thunk.
       *
       * Sets the loading state to 'failed' and stores the error message from the
       * action error object.
       *
       * @param {object} state - The current state of the slice.
       * @param {object} action - The action object containing the error.
       * @param {string} action.error.message - The error message.
       */
      .addCase(fetchData.rejected, (state, action) => {
        state.loading = "failed";
        state.error = action.error.message;
      });
  },
});

// Export the reducer function generated by createSlice.
export default dataSlice.reducer;
